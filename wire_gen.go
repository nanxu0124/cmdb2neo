// Code generated by Wire. DO NOT EDIT.

package main

import (
	"context"
	"time"

	"cmdb2neo/ioc"
	"cmdb2neo/pkg/server"
)

func InitApp(ctx context.Context) (*server.HTTPServer, func(), error) {
	cfg, err := ioc.InitConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := ioc.InitLogger()
	if err != nil {
		return nil, nil, err
	}
	cmdbClient, err := ioc.InitCMDBClient(cfg)
	if err != nil {
		if logger != nil {
			_ = logger.Sync()
		}
		return nil, nil, err
	}
	appService, err := ioc.InitAppService(ctx, cfg, cmdbClient)
	if err != nil {
		if logger != nil {
			_ = logger.Sync()
		}
		return nil, nil, err
	}
	graphClient, err := ioc.InitGraphClient(ctx, cfg)
	if err != nil {
		if appService != nil {
			_ = appService.Close(ctx)
		}
		if logger != nil {
			_ = logger.Sync()
		}
		return nil, nil, err
	}
	rcaConfig := ioc.InitRCAConfig()
	provider := ioc.InitRCAProvider(graphClient)
	analyzer, err := ioc.InitRCAAnalyzer(provider, rcaConfig)
	if err != nil {
		_ = graphClient.Close(ctx)
		if appService != nil {
			_ = appService.Close(ctx)
		}
		if logger != nil {
			_ = logger.Sync()
		}
		return nil, nil, err
	}
	rcaHandler := ioc.InitRCAHandler(analyzer, logger)
	engine := ioc.InitGinEngine(rcaHandler)
	scheduler := ioc.InitScheduler(cfg, appService, logger)
	hourlyLogger := ioc.InitHourlyLogger(logger)
	httpServer := server.NewHTTPServer(engine, logger, cfg, appService, scheduler, hourlyLogger)
	cleanup := func() {
		shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		httpServer.Shutdown(shutdownCtx)
		_ = graphClient.Close(shutdownCtx)
	}
	return httpServer, cleanup, nil
}
